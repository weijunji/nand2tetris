// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Mux1
    Not(in=instruction[15], out=typeA);
    Mux16(a=aluOut, b=instruction, sel=typeA, out=mux1);

    // Reg A
    Or(a=typeA, b=instruction[5], out=ca); // typeA or d1(dest A)
	ARegister(in=mux1, load=ca, out=ra, out[0..14]=addressM);

    // Mux2
    And(a=instruction[15], b=instruction[12], out=srcM);
    Mux16(a=ra, b=inM, sel=srcM, out=mux2);
 
    // Reg D
    And(a=instruction[15], b=instruction[4], out=cd); // typeC and d2(dest D)
    DRegister(in=aluOut, load=cd, out=rd);

    // ALU
    And(a=instruction[15], b=instruction[11], out=c1);
	And(a=instruction[15], b=instruction[10], out=c2);
	And(a=instruction[15], b=instruction[9],  out=c3);
	And(a=instruction[15], b=instruction[8],  out=c4);
	And(a=instruction[15], b=instruction[7],  out=c5);
	And(a=instruction[15], b=instruction[6],  out=c6);	
	ALU(x=rd, y=mux2, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=aluOut, zr=zr, ng=ng);

    // PC
    And(a=instruction[15], b=instruction[2], out=j1);
	And(a=instruction[15], b=instruction[1], out=j2);
	And(a=instruction[15], b=instruction[0], out=j3);

    And(a=j1, b=ng, out=lt);
    And(a=j2, b=zr, out=eq);

	Or(a=ng, b=zr, out=ngzr);
	Not(in=ngzr, out=pos);
    And(a=j3, b=pos, out=gt);
	
	Or(a=lt, b=eq, out=lteq);
	Or(a=lteq, b=gt, out=jmp);
	Not(in=jmp, out=njmp);
	PC(in=ra, reset=reset, load=jmp, inc=njmp, out[0..14]=pc);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
}